import numpy as np
from scipy.optimize import minimize
import yfinance as yf
import pathlib
import pandas as pd
from pprint import pprint
from pyopt_client import PriceHistory
import matplotlib.pyplot as plt
import datetime as dt
import scipy.cluster.hierarchy as sch
from HRP import *
from meta_labeling import *

ticker_symbols = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "JPM", "V", "JNJ", "PG", "WMT"]
taille_portefeuille = len(ticker_symbols)

stockendingdate = dt.datetime(2023, 7, 1) #'2023-08-01'
stockstartingdate = dt.datetime(2023, 6, 1) #'2023-07-25'

def get_returns_naive(ticker_symbol,starttime,endtime):

    weights = 1/taille_portefeuille
    
    returns = pd.DataFrame()
    prices = pd.DataFrame()

    for symbol in ticker_symbols:
        data = yf.download(symbol, start=starttime, end=endtime)
        
        returns[symbol] = data["Close"].pct_change()
    print(returns)
    returns = 1 + weights*returns
    print(returns)
    returns = returns.mean()
    returns= returns[1:]
    print(returns)
    Risk =np.std(returns)
    returns = np.prod(returns)


    return returns,Risk


def get_returns_hrp(tickers_symbol,starttime,endtime):
    N_days = (endtime-starttime).days
    returns = pd.DataFrame()
    portfolio_return=[]
    

    for symbol in ticker_symbols:
        data = yf.download(symbol, start=starttime - dt.timedelta(days=2) , end=endtime + dt.timedelta(days=1))
        #print(data)
        returns[symbol] = data["Close"].pct_change(periods=1)

    returns = returns[1:]
    
    time = starttime
    weights = pd.DataFrame()
    
    for i in data.index[:-1]:
        weights[i] = get_HRP(ticker_symbols,i)
    

    
    Return = np.dot(returns,weights)
    portfolio_return.append(1+Return)
    
    portfolio_return = np.array(portfolio_return)
 
   
    portfolio_return =  np.mean(portfolio_return, axis=1)
    Risk =np.std(portfolio_return)
    portfolio_return = np.prod(portfolio_return)
   

    
    #SR = Return/Risk



    return portfolio_return,Risk

def get_returns_meta_labeling(tickers_symbol,starttime,endtime):
    startingdate = '2010-01-01'
    N_days = (endtime-starttime).days
    returns = pd.DataFrame()
    portfolio_return=[]
    portfolio_return_primary_model = []
    

    for symbol in ticker_symbols:
        data = yf.download(symbol, start=starttime - dt.timedelta(days=2) , end=endtime + dt.timedelta(days=1))
        #print(data)
        returns[symbol] = data["Close"].pct_change(periods=1)

    returns = returns[1:]
    print(returns)
    
    
    weights = []
    weights_primary_model = []
    n=0
    Meta_models = []
    for symbol in ticker_symbols:
        Meta_models.append(get_meta_model(symbol,startingdate,starttime))
    for i in data.index[:-1]:
        temp_weight = []
        temp_weights_primary_model = []
        j=0
        for symbol in ticker_symbols:
            
            data = yf.download(symbol, start=i - dt.timedelta(days=100) , end=i + dt.timedelta(days=1))
            volatility = getDailyVol(data['Close'])
            x = pd.DataFrame()
            last_data = data.iloc[-1]
            high = last_data['High']
            low = last_data['Low']
            Volume = last_data['Volume']
            open = last_data['Open']
            x = [[high,low,Volume,open]]
            side = get_buy_trend(data)['position'][-1]
            meta_model = Meta_models[j]
            if side == 0 or meta_model[0].predict(x)==0:
                temp_weight.append(0)
                print(0)
            else:
                score = meta_model[0].predict_proba(x)[0][1]
                print(score)
                z = (score-0.5)/np.sqrt(score*(1-score))
                Z = 2*norm.cdf(z)-1
                print(Z)
                temp_weight.append(Z) 
            temp_weights_primary_model.append(side)
            j+=1
        temp_weights_primary_model=temp_weights_primary_model/sum(temp_weights_primary_model)
        weights_primary_model.append(temp_weights_primary_model)

        temp_weight=[x/sum(temp_weight) for x in temp_weight]
        weights.append(temp_weight)
        
        
        

        Return_primary_model=np.multiply(temp_weights_primary_model,returns.iloc[n])
        portfolio_return_primary_model.append(1+Return_primary_model)

        Return = np.multiply(temp_weight,returns.iloc[n])
        portfolio_return.append(1+Return)
        n=n+1
    
    portfolio_return_primary_model=np.array(portfolio_return_primary_model)
    portfolio_return = np.array(portfolio_return)
 
    
    portfolio_return_primary_model = np.mean(portfolio_return_primary_model,axis=1)
    print(portfolio_return_primary_model)
    risk_primary_model = np.std(portfolio_return_primary_model)
    portfolio_return_primary_model = np.prod(portfolio_return_primary_model)

    portfolio_return =  np.mean(portfolio_return, axis=1)
    risk = np.std(portfolio_return)
    portfolio_return = np.prod(portfolio_return)
    
    

    return portfolio_return, risk, portfolio_return_primary_model, risk_primary_model
 
# Return_HRP,Risk_HRP = get_returns_hrp(ticker_symbols,stockstartingdate,stockendingdate)
Return_naive,risk_naive = get_returns_naive(ticker_symbols,stockstartingdate,stockendingdate)
# Return = get_returns_meta_labeling(ticker_symbols,stockstartingdate,stockendingdate)
# Return_meta_model = Return[0]
# risk_meta_model = Return[1]
# Return_primary_model = Return[2]
# risk_primary_model = Return[3]

print("The return of the naive strategy is :",Return_naive)
print("The risk of the naive strategy is :",risk_naive)
# print("\n")
# print("The return of the HRP strategy is :",Return_HRP)
# print("The risk of the HRP strategy is :",Risk_HRP)
# print("\n")
# print("the return of the primary model is :",Return_primary_model)
# print("The risk of the primary model strategy is :",risk_primary_model)
# print("\n")
# print("the return of the meta model is :",Return_meta_model)
# print("The risk of the meta model strategy is :",risk_meta_model)
