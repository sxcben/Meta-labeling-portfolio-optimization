corr_matrix = returns.corr()
dist_matrix = 0.5*(1-corr_matrix)**.5
eucl_dist_matrix = pd.DataFrame()
for symbol1 in ticker_symbols:
    for symbol2 in ticker_symbols:

        eucl_dist_matrix.loc[symbol1,symbol2] = np.sqrt(np.sum((dist_matrix[symbol1]-dist_matrix[symbol2])**2))


link = sch.linkage(dist_matrix,'single')  # it orders the symbol to cluster them

def getIVP(cov,**kargs):
    ivp = 1./np.diag(cov)
    ivp/=ivp.sum()
    return ivp

def getClusterVar(cov,cItems):
    cov_=cov.loc[cItems,cItems]
    w_=getIVP(cov_).reshape(-1,1)
    cVar = np.dot(np.dot(w_.T,cov_),w_)[0,0]
    return cVar

def GetQuasiDiag(link):
    link=link.astype(int)
    sortIx = pd.Series([link[-1,0],link[-1,1]])
    numItems = link[-1,3]
    while sortIx.max() >= numItems:
        sortIx.index = range(0,sortIx.shape[0]*2,2)
        df0 = sortIx[sortIx>=numItems]
        i = df0.index
        j=df0.values-numItems
        sortIx[i]=link[j,0]
        df0 = pd.Series(link[j,1],index = i+1)
        sortIx=sortIx._append(df0)
        sortIx = sortIx.sort_index()
        sortIx.index = range(sortIx.shape[0])
    return sortIx.tolist()


def getRecBipart(cov,sortIx):
    w=pd.Series(1,index=sortIx)
    cItems = [sortIx]
    while len(cItems)>0:

        cItems = [i[j:k] for i in cItems for j,k in ((0,int(len(i)/2)),(int(len(i)/2),len(i))) if len(i)>1]
        #print(cItems,len(cItems))
        for i in range(0,len(cItems),2):
            cItems0=cItems[i]
            cItems1=cItems[i+1]
            cVar0= getClusterVar(cov,cItems0)
            cVar1= getClusterVar(cov,cItems1)
            alpha = 1-cVar0/(cVar0+cVar1)
            w[cItems0]*=alpha
            w[cItems1]*=1-alpha
    return w

def correlDist(corr):
    dist = ((1-corr)/2.)**.5
    return dist

def plotCorrMatrix(path,corr,labels=None):
    if labels is None : labels=[]
    plt.pcolor(corr)
    plt.colorbar()
    plt.yticks(np.arange(.5,corr.shape[0]+.5),labels)
    plt.xticks(np.arange(.5,corr.shape[0]+.5),labels)
    plt.savefig(path)
    plt.clf()
    plt.close()
    return

plt.figure()
plotCorrMatrix('HRP3_corr0.png',corr_matrix,labels=corr_matrix.columns)   #affiche la matrice de corr√©lation entre les actions

sortIx = GetQuasiDiag(link)
sortIx=corr_matrix.index[sortIx].tolist()
print(eucl_dist_matrix)
print(sortIx)
df0 = corr_matrix.loc[sortIx,sortIx]
print(df0)
plotCorrMatrix('HRP3_corr1.png',df0,labels=df0.columns)
hrp = getRecBipart(cov_matrix,sortIx)
print(hrp)

def plotdendrogramme(path,link):
    dendrogram = sch.dendrogram(link)

    # Personnaliser l'apparence du dendrogramme (facultatif)
    plt.title('Dendrogramme')
    plt.xlabel('Indices des observations')
    plt.ylabel('Distance')
    plt.savefig(path)
    plt.clf()
    plt.close()
    return

plotdendrogramme('dendrogramme.png',link)
