def getFixedTimeHozironLabel(close,tau):
    startingprice = close[0]
    endingprice = close[-1]
    Return = endingprice/startingprice -1
    if Return<-tau:
        return -1
    if Return>tau:
        return 1
    else :
        return 0




def getDailyVol(close,span0=100):
    df0 = close.index.searchsorted(close.index-pd.Timedelta(days=1))
    df0=df0[df0>0]
    df0=pd.Series(close.index[df0-1],index=close.index[close.shape[0]-df0.shape[0]:])
    df0=close.loc[df0.index]/close.loc[df0.values].values-1
    df0=df0.ewm(span=span0).std()
    return df0




# daily_volatility = getDailyVol(df)


def get_3_barriers(daily_volatility,prices,t_final,upper_lower_multipliers):
    #create a container
    barriers = pd.DataFrame(columns=['days_passed',
              'price', 'vert_barrier', \
              'top_barrier', 'bottom_barrier'], \
               index = daily_volatility.index)

    for day, vol in daily_volatility.items():
        days_passed = len(daily_volatility.loc[daily_volatility.index[0] : day])
        #set the vertical barrier
        if (days_passed + t_final < len(daily_volatility.index) and t_final != 0):
            vert_barrier = daily_volatility.index[days_passed + t_final]

        else:
            vert_barrier = np.nan
        #set the top barrier
        if upper_lower_multipliers[0] > 0:
            top_barrier = prices.loc[day] + prices.loc[day] * upper_lower_multipliers[0] * vol
        else:
            #set it to NaNs
            top_barrier = pd.Series(index=prices.index)
        #set the bottom barrier
        if upper_lower_multipliers[1] > 0:
            bottom_barrier = prices.loc[day] - prices.loc[day] * upper_lower_multipliers[1] * vol
        else:
            #set it to NaNs
            bottom_barrier = pd.Series(index=prices.index)
        barriers.loc[day, ['days_passed', 'price',
        'vert_barrier','top_barrier', 'bottom_barrier']] = days_passed, prices.loc[day], vert_barrier, top_barrier, bottom_barrier

    return barriers

# barriers = get_3_barriers(daily_volatility,df,t_final,upper_lower_multipliers)

def get_labels(barriers,returns,High,Low,Volume,Open,daily_volatility,position):
    '''
    start: first day of the window
    end:last day of the window
    price_initial: first day stock price
    price_final:last day stock price
    top_barrier: profit taking limit
    bottom_barrier:stop loss limt
    condition_pt:top_barrier touching conditon
    condition_sl:bottom_barrier touching conditon
    '''
    labels = pd.DataFrame(columns=['returns', 'High', 'Low', 'Volume', 'Open', 'delta_time', 'Volatility','meta_labels',
              'out'], \
               index = barriers.index)
    barriers['out']=None
    for i in range(len(barriers.index)):
        start = barriers.index[i]
        end = barriers.vert_barrier[i]
        if pd.notna(end):
            # assign the initial and final price
            price_initial = barriers.price[start]
            price_final = barriers.price[end]
            # assign the top and bottom barriers
            top_barrier = barriers.top_barrier[i]
            bottom_barrier = barriers.bottom_barrier[i]
            #set the profit taking and stop loss conditons
            condition_pt = (barriers.price[start: end] >= top_barrier).any()
            condition_sl = (barriers.price[start: end] <= bottom_barrier).any()

            #get the first index
            indices_pt = (barriers.price[start: end] >= top_barrier)
            first_index_pt = 0
            while first_index_pt < len(indices_pt) and not indices_pt[first_index_pt]:
                first_index_pt += 1


            indices_sl = (barriers.price[start: end] <= bottom_barrier)
            first_index_sl=0
            while first_index_sl < len(indices_sl) and not indices_sl[first_index_sl]:
                first_index_sl += 1

            #assign the labels

            if condition_pt and first_index_pt<first_index_sl:
                barriers['out'][i] = 1
                labels['out'][i] = 1
                labels['meta_labels'][i] = max(0,np.sign(position[i]))
                labels['returns'][i]=returns[i+first_index_pt]
                labels['High'][i]=High[i+first_index_pt]
                labels['Low'][i]=Low[i+first_index_pt]
                labels['Volume'][i]=Volume[i+first_index_pt]
                labels['Open'][i]=Open[i+first_index_pt]
                labels['delta_time'][i]=first_index_pt
                labels['Volatility'][i]=daily_volatility[i+first_index_pt]
            elif condition_sl :
                barriers['out'][i] = -1
                labels['out'][i] = -1
                labels['meta_labels'][i] = max(0,-np.sign(position[i]))
                labels['returns'][i]=returns[i+first_index_sl]
                labels['High'][i]=High[i+first_index_sl]
                labels['Low'][i]=Low[i+first_index_sl]
                labels['Volume'][i]=Volume[i+first_index_sl]
                labels['Open'][i]=Open[i+first_index_sl]
                labels['delta_time'][i]=first_index_sl
                labels['Volatility'][i]=daily_volatility[i+first_index_sl]
            else:
                barriers['out'][i] = np.sign(price_final/price_initial -1) #0
                labels['out'][i] = np.sign(price_final/price_initial -1)  #0
                labels['meta_labels'][i] = max(0,np.sign(position[i]*labels['out'][i]))
                labels['returns'][i]=returns.loc[end]
                labels['High'][i]=High.loc[end]
                labels['Low'][i]=Low.loc[end]
                labels['Volume'][i]=Volume.loc[end]
                labels['Open'][i]=Open.loc[end]
                labels['delta_time'][i]=end - start
                labels['Volatility'][i]=daily_volatility.loc[end]


    labels = labels.dropna()
    return labels

# labels = get_labels(barriers,returns,High,Low,Volume,Open)

def disp_barriers(barriers,day):
    plt.plot(barriers.out,'bo')


    fig,ax = plt.subplots()
    ax.set(title='Microsoft stock price',
        xlabel='date', ylabel='price')
    jour = 120
    ax.plot(barriers.price[jour: jour+100])
    start = barriers.index[jour+20]
    end = barriers.index[jour+20+t_final]
    upper_barrier = barriers.top_barrier[jour+20]
    lower_barrier = barriers.bottom_barrier[jour+20]
    ax.plot([start,end],[lower_barrier,lower_barrier], 'r--')
    ax.plot([start,end],[upper_barrier,upper_barrier], 'r--')
    ax.plot([start, start], [lower_barrier, upper_barrier], 'r-')
    ax.plot([end, end], [lower_barrier, upper_barrier], 'r-')
    ax.set_ylim(200)

    print(barriers.index[jour+20])
    print(barriers.loc[barriers.index[jour+20]])
    # plt.plot(index,prices)
    plt.show()
    return

